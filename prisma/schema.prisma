generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Program Tables
model Program { // research, curriculum development, professional development, extension
  id        Int                        @id @default(autoincrement())
  name      String                     @unique(map: "Program_name_key")
  research  Research[]
  cd        CurriculumDevelopment[]
  pd        ProfessionalDevelopment[]
  extension Extension[]
}

model Research {
  id        Int       @id @default(autoincrement())
  title           String            @db.Text
  programId Int
  program   Program   @relation(fields: [programId], references: [id], map: "Research_programId_fkey")
}

model CurriculumDevelopment {
  id  Int @id @default(autoincrement())
  title           String            @db.Text
  programId Int
  program   Program   @relation(fields: [programId], references: [id], map: "CD_programId_fkey")
}

model Extension {
  id  Int @id @default(autoincrement())
  title           String            @db.Text
  programId Int
  program   Program   @relation(fields: [programId], references: [id], map: "Extension_programId_fkey")
}

model ProfessionalDevelopment {  // professional development module table -- no for the other three for now
  id              Int               @id @default(autoincrement())
  title           String            @db.Text
  leader          String
  numParticipants Int
  date            String
  imageUrl        String?           @db.Text     
  trainingId      Int
  training        Training          @relation(fields: [trainingId], references: [id], map: "PD_trainingId_fkey")
  programId       Int
  program         Program           @relation(fields: [programId], references: [id], map: "PD_programId_fkey")
  overview        Overview[]    
  highlight       Highlight[]
  participantonpd ParticipantOnPd[]
  personnelonpd   PersonnelOnPd[]

  @@index([programId], map: "PD_programId_fkey")
}

model Training { // online, hybrid, face-to-face
  id    Int                           @id @default(autoincrement())
  type  String
  pd    ProfessionalDevelopment[]
}

model Overview {
  id      Int     @id @default(autoincrement())
  item    String
  pdId     Int
  pd       ProfessionalDevelopment  @relation(fields: [pdId], references: [id], map: "Overview_pdId_fkey")
}

model Participant { // random text
  id                Int               @id @default(autoincrement())
  item              String            @db.Text
  participantonpd   ParticipantOnPd[]
}

model ParticipantOnPd { // Join Table (participant and pd)
  pdId          Int         
  participantId Int         
  participant   Participant             @relation(fields: [participantId], references: [id], map: "ParticipantOnPD_participantId_fkey")
  pd            ProfessionalDevelopment @relation(fields: [pdId], references: [id], map: "ParticipantOnPD_pdId_fkey")      

  @@id([pdId, participantId])
  @@index([participantId], map: "ParticipantOnPD_participantId_fkey") 
} 

model Personnel { // random text
  id            Int             @id @default(autoincrement())
  item          String          @db.Text
  personnelonpd PersonnelOnPd[] 
}

model PersonnelOnPd { // Join Table (personnel and pd)
  pdId        Int       
  personnelId Int
  personnel   Personnel               @relation(fields: [personnelId], references: [id], map: "PersonnelOnPD_personnelId_fkey")
  pd          ProfessionalDevelopment @relation(fields: [pdId], references: [id], map: "PersonnelOnPD_pdId_fkey")

  @@id([pdId, personnelId])
  @@index([personnelId], map: "PersonnelOnPD_personnelId_fkey")
}

model Highlight { // url paths
  id       Int                      @id @default(autoincrement())
  title    String                   @db.Text
  text     String?                  @db.Text
  imageUrl String?                  @db.Text
  pdfURL   String?                  @db.Text
  vidURL   String?                  @db.Text
  pdId     Int
  pd       ProfessionalDevelopment  @relation(fields: [pdId], references: [id], map: "Highlight_pdId_fkey")

  @@index([pdId], map: "Highlight_pdId_fkey")
}

// Role Tables
model Role {  // user, admin, super user
  id    Int               @id @default(autoincrement())
  name  String            @unique(map: "Role_name_key")
  users Account[]
  perms RolePermission[]
}

model Permission {  // can_view, can_add, can_edit, can_delete, can_assign
  id        Int               @id @default(autoincrement())
  perm_type String            @unique(map: "Permission_perm_type_key")  // change to name -- for better generalization
  perms     RolePermission[]
}

model RolePermission {  // Join Table (role and permission)
  roleId  Int
  permId  Int
  role    Role            @relation(fields:[roleId], references: [id])
  perms   Permission      @relation(fields:[permId], references: [id])

  @@id([roleId, permId])
}

model Account { // actual users with roles
  id        Int     @id @default(autoincrement())
  username  String  @unique
  firstName String  
  lastName  String
  acctName  String
  password  String
  roleId    Int
  role      Role    @relation(fields:[roleId], references: [id], map: "Account_roleId_fkey")
}




// model Participant {
//   id              Int               @id @default(autoincrement())
//   firstName       String
//   lastName        String
//   role            String
//   team            String
//   participantonpd ParticipantOnPd[]
// }

// model ParticipantOnPd {
//   pdId          Int
//   participantId Int
//   participant   Participant @relation(fields: [participantId], references: [id], map: "ParticipantOnPD_participantId_fkey")
//   pd            PD          @relation(fields: [pdId], references: [id], map: "ParticipantOnPD_pdId_fkey")

//   @@id([pdId, participantId])
//   @@index([participantId], map: "ParticipantOnPD_participantId_fkey")
// }

// model Personnel {
//   id            Int             @id @default(autoincrement())
//   firstName     String
//   lastName      String
//   role          String
//   team          String
//   personnelonpd PersonnelOnPd[]
// }

// model PersonnelOnPd {
//   pdId        Int
//   personnelId Int
//   pd          PD        @relation(fields: [pdId], references: [id], map: "PersonnelOnPD_pdId_fkey")
//   personnel   Personnel @relation(fields: [personnelId], references: [id], map: "PersonnelOnPD_personnelId_fkey")

//   @@id([pdId, personnelId])
//   @@index([personnelId], map: "PersonnelOnPD_personnelId_fkey")
// }